require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function diagnoseSupabaseLocal() {
  console.log('üîç DIAGN√ìSTICO DE SUPABASE - ENTORNO LOCAL');
  console.log('=' .repeat(50));
  
  // 1. Verificar variables de entorno
  console.log('\n1. VERIFICANDO VARIABLES DE ENTORNO:');
  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
  
  console.log(`URL: ${supabaseUrl ? '‚úÖ Configurada' : '‚ùå No encontrada'}`);
  console.log(`ANON_KEY: ${supabaseKey ? '‚úÖ Configurada' : '‚ùå No encontrada'}`);
  
  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Variables de entorno faltantes. Verifica tu archivo .env');
    return;
  }
  
  // 2. Crear cliente Supabase
  console.log('\n2. CREANDO CLIENTE SUPABASE:');
  const supabase = createClient(supabaseUrl, supabaseKey);
  console.log('‚úÖ Cliente creado');
  
  // 3. Probar conectividad b√°sica
  console.log('\n3. PROBANDO CONECTIVIDAD B√ÅSICA:');
  try {
    const { data, error } = await supabase.from('profiles').select('count').limit(1);
    if (error) {
      console.log(`‚ùå Error de conectividad: ${error.message}`);
    } else {
      console.log('‚úÖ Conectividad b√°sica OK');
    }
  } catch (err) {
    console.log(`‚ùå Error de red: ${err.message}`);
  }
  
  // 4. Verificar autenticaci√≥n del usuario espec√≠fico
  console.log('\n4. VERIFICANDO USUARIO ESPEC√çFICO:');
  const userId = '79bcdeb7-512b-45cd-88df-f5b44169115e';
  
  try {
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (profileError) {
      console.log(`‚ùå Error al obtener perfil: ${profileError.message}`);
    } else {
      console.log(`‚úÖ Perfil encontrado: ${profile.email || 'Sin email'}`);
    }
  } catch (err) {
    console.log(`‚ùå Error al verificar usuario: ${err.message}`);
  }
  
  // 5. Probar endpoints espec√≠ficos que fallan
  console.log('\n5. PROBANDO ENDPOINTS ESPEC√çFICOS:');
  const courseId = 'd7c3e503-ed61-4d7a-9e5f-aedc407d4836';
  
  // Inscripciones
  try {
    const { data: inscripciones, error: inscError } = await supabase
      .from('inscripciones')
      .select('*')
      .eq('user_id', userId)
      .limit(5);
      
    if (inscError) {
      console.log(`‚ùå Inscripciones: ${inscError.message}`);
    } else {
      console.log(`‚úÖ Inscripciones: ${inscripciones.length} encontradas`);
    }
  } catch (err) {
    console.log(`‚ùå Error inscripciones: ${err.message}`);
  }
  
  // Lecciones
  try {
    const { data: lecciones, error: lecError } = await supabase
      .from('lecciones')
      .select('*')
      .eq('curso_id', courseId)
      .limit(5);
      
    if (lecError) {
      console.log(`‚ùå Lecciones: ${lecError.message}`);
    } else {
      console.log(`‚úÖ Lecciones: ${lecciones.length} encontradas`);
    }
  } catch (err) {
    console.log(`‚ùå Error lecciones: ${err.message}`);
  }
  
  // Cuestionarios
  try {
    const { data: cuestionarios, error: cuestionError } = await supabase
      .from('cuestionarios')
      .select('*')
      .eq('curso_id', courseId)
      .limit(5);
      
    if (cuestionError) {
      console.log(`‚ùå Cuestionarios: ${cuestionError.message}`);
    } else {
      console.log(`‚úÖ Cuestionarios: ${cuestionarios.length} encontrados`);
    }
  } catch (err) {
    console.log(`‚ùå Error cuestionarios: ${err.message}`);
  }
  
  // Respuestas texto libre
  try {
    const { data: respuestas, error: respError } = await supabase
      .from('respuestas_texto_libre')
      .select('*')
      .or(`user_id.eq.${userId},user_id.eq.anonymous`)
      .limit(5);
      
    if (respError) {
      console.log(`‚ùå Respuestas texto libre: ${respError.message}`);
    } else {
      console.log(`‚úÖ Respuestas texto libre: ${respuestas.length} encontradas`);
    }
  } catch (err) {
    console.log(`‚ùå Error respuestas: ${err.message}`);
  }
  
  // 6. Verificar permisos RLS
  console.log('\n6. VERIFICANDO PERMISOS RLS:');
  const tables = ['inscripciones', 'lecciones', 'cuestionarios', 'respuestas_texto_libre'];
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('count')
        .limit(1);
        
      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`);
      } else {
        console.log(`‚úÖ ${table}: Permisos OK`);
      }
    } catch (err) {
      console.log(`‚ùå ${table}: Error de red - ${err.message}`);
    }
  }
  
  // 7. Verificar estado de autenticaci√≥n
  console.log('\n7. VERIFICANDO ESTADO DE AUTENTICACI√ìN:');
  try {
    const { data: { session }, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.log(`‚ùå Error de autenticaci√≥n: ${authError.message}`);
    } else if (session) {
      console.log(`‚úÖ Usuario autenticado: ${session.user.email}`);
    } else {
      console.log('‚ö†Ô∏è No hay sesi√≥n activa (usuario an√≥nimo)');
    }
  } catch (err) {
    console.log(`‚ùå Error al verificar sesi√≥n: ${err.message}`);
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('üèÅ DIAGN√ìSTICO COMPLETADO');
}

diagnoseSupabaseLocal().catch(console.error);