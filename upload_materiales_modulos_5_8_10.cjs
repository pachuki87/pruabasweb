require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuraci√≥n de Supabase - usar service role key para operaciones administrativas
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Faltan variables de entorno de Supabase');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// ID del curso M√°ster en Adicciones
const CURSO_MASTER_ID = 'b5ef8c64-fe26-4f20-8221-80a1bf475b05';

// Configuraci√≥n de materiales para los m√≥dulos 5, 8 y 10
const materialesConfig = {
  modulo5: {
    curso_id: CURSO_MASTER_ID,
    leccion_id: null, // Se asignar√° despu√©s de crear las lecciones
    materiales: [
      {
        archivo: 'master en adicciones/5) PSICOLOGIA ADICCIONES/La entrevista v.pdf',
        titulo: 'La Entrevista en Psicolog√≠a de las Adicciones',
        descripcion: 'Gu√≠a pr√°ctica sobre t√©cnicas de entrevista en el contexto de las adicciones',
        tipo_material: 'pdf'
      },
      {
        archivo: 'master en adicciones/5) PSICOLOGIA ADICCIONES/PGTP_Cuadernillo para Personas en Terapia de Aceptaci√≥n y Compromiso_Individual o grupal.pdf',
        titulo: 'Cuadernillo de Terapia de Aceptaci√≥n y Compromiso',
        descripcion: 'Material pr√°ctico para terapia de aceptaci√≥n y compromiso individual o grupal',
        tipo_material: 'pdf'
      },
      {
        archivo: 'master en adicciones/5) PSICOLOGIA ADICCIONES/WILSON TERAPIA ACEPTACION Y COMPROMISO.pages',
        titulo: 'Wilson - Terapia de Aceptaci√≥n y Compromiso',
        descripcion: 'Fundamentos te√≥ricos de la Terapia de Aceptaci√≥n y Compromiso seg√∫n Wilson',
        tipo_material: 'documento'
      }
    ]
  },
  modulo8: {
    curso_id: CURSO_MASTER_ID,
    leccion_id: null, // Se asignar√° despu√©s de crear las lecciones
    materiales: [
      {
        archivo: 'master en adicciones/8) GESTI√ìN DE LAS ADICCIONES DESDE LA PERSPECTIVA DE G√âNERO/2021_Protocolo_Inclusion_Genero_Prevencion_Adicciones.pdf',
        titulo: 'Protocolo de Inclusi√≥n de G√©nero en Prevenci√≥n de Adicciones',
        descripcion: 'Protocolo oficial para la inclusi√≥n de la perspectiva de g√©nero en programas de prevenci√≥n de adicciones',
        tipo_material: 'pdf'
      },
      {
        archivo: 'master en adicciones/8) GESTI√ìN DE LAS ADICCIONES DESDE LA PERSPECTIVA DE G√âNERO/IVEncuentroGeneroDrogas_PatriciaMartinezRedondo.pdf',
        titulo: 'IV Encuentro G√©nero y Drogas - Patricia Mart√≠nez Redondo',
        descripcion: 'Ponencia sobre g√©nero y drogas del IV Encuentro especializado',
        tipo_material: 'pdf'
      }
    ]
  },
  modulo10: {
    curso_id: CURSO_MASTER_ID,
    leccion_id: null, // Se asignar√° despu√©s de crear las lecciones
    materiales: [
      {
        archivo: 'master en adicciones/10) TRABAJO FINAL MASTER/GUIA PRACTICA TFM.pages',
        titulo: 'Gu√≠a Pr√°ctica del Trabajo Final de M√°ster',
        descripcion: 'Manual completo con instrucciones, requisitos y criterios para la elaboraci√≥n del TFM',
        tipo_material: 'documento'
      }
    ]
  }
};

// Funci√≥n para obtener el tama√±o del archivo
function obtenerTama√±oArchivo(rutaArchivo) {
  try {
    const stats = fs.statSync(rutaArchivo);
    return stats.size; // Retornar solo el n√∫mero de bytes
  } catch (error) {
    console.warn(`‚ö†Ô∏è No se pudo obtener el tama√±o del archivo: ${rutaArchivo}`);
    return 0;
  }
}

// Funci√≥n para formatear el tama√±o para mostrar
function formatearTama√±o(bytes) {
  if (bytes < 1024) {
    return `${bytes} B`;
  } else if (bytes < 1024 * 1024) {
    return `${(bytes / 1024).toFixed(1)} KB`;
  } else {
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  }
}

// Funci√≥n para verificar si un archivo existe
function verificarArchivo(rutaArchivo) {
  const rutaCompleta = path.join(__dirname, rutaArchivo);
  return fs.existsSync(rutaCompleta);
}

// Funci√≥n para subir materiales de un m√≥dulo
async function subirMaterialesModulo(nombreModulo, config) {
  console.log(`\nüìö Procesando materiales del ${nombreModulo}...`);
  
  let materialesSubidos = 0;
  let errores = 0;

  for (const material of config.materiales) {
    try {
      const rutaCompleta = path.join(__dirname, material.archivo);
      
      // Verificar si el archivo existe
      if (!verificarArchivo(material.archivo)) {
        console.log(`‚ùå Archivo no encontrado: ${material.archivo}`);
        errores++;
        continue;
      }

      // Obtener tama√±o del archivo
      const tama√±oArchivo = obtenerTama√±oArchivo(rutaCompleta);
      const tama√±oFormateado = formatearTama√±o(tama√±oArchivo);

      // Preparar datos para insertar
      const materialData = {
        titulo: material.titulo,
        curso_id: config.curso_id,
        url_archivo: material.archivo,
        tipo_material: material.tipo_material,
        descripcion: material.descripcion,
        tama√±o_archivo: tama√±oArchivo, // Enviar como n√∫mero
        leccion_id: config.leccion_id, // null por ahora, se actualizar√° despu√©s
        creado_en: new Date().toISOString()
      };

      // Insertar en Supabase
      const { data, error } = await supabase
        .from('materiales')
        .insert([materialData])
        .select();

      if (error) {
        console.error(`‚ùå Error al subir ${material.titulo}:`, error.message);
        errores++;
      } else {
        console.log(`‚úÖ Material subido: ${material.titulo} (${tama√±oFormateado})`);
        materialesSubidos++;
      }

      // Peque√±a pausa para evitar sobrecarga
      await new Promise(resolve => setTimeout(resolve, 100));

    } catch (error) {
      console.error(`‚ùå Error procesando ${material.titulo}:`, error.message);
      errores++;
    }
  }

  console.log(`\nüìä Resumen ${nombreModulo}:`);
  console.log(`   ‚úÖ Materiales subidos: ${materialesSubidos}`);
  console.log(`   ‚ùå Errores: ${errores}`);
  
  return { subidos: materialesSubidos, errores };
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando subida de materiales para m√≥dulos 5, 8 y 10...');
  console.log(`üì° Conectando a Supabase: ${supabaseUrl}`);

  try {
    // Verificar conexi√≥n a Supabase
    const { data: testData, error: testError } = await supabase
      .from('cursos')
      .select('id, titulo')
      .eq('id', CURSO_MASTER_ID)
      .single();

    if (testError) {
      console.error('‚ùå Error conectando a Supabase:', testError.message);
      return;
    }

    console.log(`‚úÖ Conectado exitosamente. Curso: ${testData.titulo}`);

    let totalSubidos = 0;
    let totalErrores = 0;

    // Subir materiales de cada m√≥dulo
    const resultadoModulo5 = await subirMaterialesModulo('M√≥dulo 5 - Psicolog√≠a Aplicada a las Adicciones', materialesConfig.modulo5);
    totalSubidos += resultadoModulo5.subidos;
    totalErrores += resultadoModulo5.errores;

    const resultadoModulo8 = await subirMaterialesModulo('M√≥dulo 8 - Gesti√≥n desde Perspectiva de G√©nero', materialesConfig.modulo8);
    totalSubidos += resultadoModulo8.subidos;
    totalErrores += resultadoModulo8.errores;

    const resultadoModulo10 = await subirMaterialesModulo('M√≥dulo 10 - Trabajo Final de M√°ster', materialesConfig.modulo10);
    totalSubidos += resultadoModulo10.subidos;
    totalErrores += resultadoModulo10.errores;

    // Resumen final
    console.log('\nüéâ ¬°Proceso completado!');
    console.log('=' * 50);
    console.log(`üìä RESUMEN FINAL:`);
    console.log(`   ‚úÖ Total materiales subidos: ${totalSubidos}`);
    console.log(`   ‚ùå Total errores: ${totalErrores}`);
    console.log(`   üìö M√≥dulos procesados: 3`);

    if (totalErrores === 0) {
      console.log('\nüéä ¬°Todos los materiales se subieron exitosamente!');
    } else {
      console.log(`\n‚ö†Ô∏è Se complet√≥ con ${totalErrores} errores. Revisa los archivos faltantes.`);
    }

  } catch (error) {
    console.error('üí• Error fatal:', error.message);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main, materialesConfig };