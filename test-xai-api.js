import axios from 'axios';
import 'dotenv/config';

// Configuraci√≥n de la API de XAI GLM
const glmConfig = {
    apiKey: process.env.VITE_GLM_API_KEY || 'a09bfaae5e404dcba0ce8e1abaeb90fe.fln78t0JDEIvA8K5',
    baseUrl: process.env.VITE_GLM_API_URL || 'https://api.x.ai/v1/chat/completions',
    model: process.env.VITE_GLM_MODEL || 'grok-beta'
};

async function testXAIAPI() {
    console.log('üß™ Probando conexi√≥n con XAI GLM API...');
    console.log('üì° Configuraci√≥n:', {
        baseUrl: glmConfig.baseUrl,
        model: glmConfig.model,
        apiKey: glmConfig.apiKey ? '***' + glmConfig.apiKey.slice(-10) : 'No configurada'
    });

    try {
        const response = await axios.post(
            glmConfig.baseUrl,
            {
                model: glmConfig.model,
                messages: [
                    {
                        role: 'system',
                        content: 'Eres un experto en psicolog√≠a y adicciones.'
                    },
                    {
                        role: 'user',
                        content: 'Hola, ¬øpuedes confirmar que est√°s funcionando correctamente? Por favor responde brevemente.'
                    }
                ],
                max_tokens: 100,
                temperature: 0.7
            },
            {
                headers: {
                    'Authorization': `Bearer ${glmConfig.apiKey}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log('‚úÖ Conexi√≥n exitosa con XAI GLM API');
        console.log('üìã Respuesta:', response.data.choices[0].message.content);
        console.log('üìä Modelo usado:', response.data.model);
        console.log('üîÑ Tokens usados:', response.data.usage?.total_tokens || 'No disponible');

        return {
            success: true,
            message: 'Conexi√≥n establecida correctamente',
            response: response.data.choices[0].message.content
        };

    } catch (error) {
        console.error('‚ùå Error conectando con XAI GLM API:');
        console.error('üö® Status:', error.response?.status);
        console.error('üìÑ Error details:', error.response?.data);
        console.error('üí¨ Message:', error.message);

        return {
            success: false,
            message: 'Error al conectar con la API de XAI GLM',
            error: error.response?.data || error.message
        };
    }
}

async function testEvaluationPrompt() {
    console.log('\nüìù Probando evaluaci√≥n de respuestas...');

    const testAnswers = {
        pregunta1: "Ser adicto significa tener una dependencia f√≠sica o psicol√≥gica de alguna sustancia o actividad que afecta negativamente la vida diaria.",
        pregunta2: "Las consecuencias incluyen problemas de salud, deterioro de relaciones familiares, p√©rdida de empleo y problemas econ√≥micos.",
        pregunta3: "La familia es crucial para dar apoyo emocional y motivaci√≥n para la recuperaci√≥n.",
        pregunta4: "El mindfulness ayuda a las personas a ser m√°s conscientes de sus pensamientos y emociones, lo que ayuda a controlar los impulsos adictivos."
    };

    const prompt = `
    Eres un experto en psicolog√≠a y adicciones. Eval√∫a y proporciona retroalimentaci√≥n constructiva sobre las siguientes respuestas:

    Pregunta 1: ¬øQu√© significa para usted ser adicto y cu√°les considera que son las principales caracter√≠sticas de una conducta adictiva?
    Respuesta del estudiante: "${testAnswers.pregunta1}"

    Pregunta 2: Describa las principales consecuencias que las adicciones pueden tener en la vida de una persona y su entorno familiar.
    Respuesta del estudiante: "${testAnswers.pregunta2}"

    Por favor, proporciona una correcci√≥n detallada y una puntuaci√≥n del 1 al 10 para cada respuesta.
    Responde en formato JSON con la siguiente estructura:
    {
        "pregunta1": {"correccion": "...", "puntuacion": 8, "sugerencias": ["...", "..."]},
        "pregunta2": {"correccion": "...", "puntuacion": 9, "sugerencias": ["...", "..."]},
        "resumen": "..."
    }
    `;

    try {
        const response = await axios.post(
            glmConfig.baseUrl,
            {
                model: glmConfig.model,
                messages: [
                    {
                        role: 'system',
                        content: 'Eres un experto en psicolog√≠a y adicciones con amplia experiencia en evaluaci√≥n educativa.'
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                max_tokens: 1000,
                temperature: 0.7
            },
            {
                headers: {
                    'Authorization': `Bearer ${glmConfig.apiKey}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log('‚úÖ Evaluaci√≥n completada');
        console.log('üìã Respuesta de evaluaci√≥n:');
        console.log(response.data.choices[0].message.content);

        return {
            success: true,
            evaluation: response.data.choices[0].message.content
        };

    } catch (error) {
        console.error('‚ùå Error en evaluaci√≥n:', error.response?.data || error.message);
        return {
            success: false,
            error: error.response?.data || error.message
        };
    }
}

async function main() {
    console.log('üöÄ Iniciando pruebas de XAI GLM API...\n');

    // Test 1: Conexi√≥n b√°sica
    const connectionTest = await testXAIAPI();

    if (!connectionTest.success) {
        console.log('\n‚ùå Las pruebas no pueden continuar debido a errores de conexi√≥n.');
        return;
    }

    // Test 2: Evaluaci√≥n de respuestas
    const evaluationTest = await testEvaluationPrompt();

    console.log('\nüìä Resumen de pruebas:');
    console.log(`‚úÖ Conexi√≥n: ${connectionTest.success ? 'OK' : 'FALL√ì'}`);
    console.log(`‚úÖ Evaluaci√≥n: ${evaluationTest.success ? 'OK' : 'FALL√ì'}`);

    if (connectionTest.success && evaluationTest.success) {
        console.log('\nüéâ ¬°Todas las pruebas pasaron! El sistema est√° listo para usar.');
    } else {
        console.log('\n‚ö†Ô∏è  Algunas pruebas fallaron. Revisa la configuraci√≥n.');
    }
}

// Ejecutar pruebas
main().catch(console.error);