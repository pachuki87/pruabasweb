require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

console.log('üîç PROBANDO CONEXI√ìN MCP SUPABASE');
console.log('================================');

// Verificar variables de entorno
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.VITE_SUPABASE_SERVICE_KEY;
const accessToken = process.env.SUPABASE_ACCESS_TOKEN;
const projectRef = process.env.SUPABASE_PROJECT_REF;

console.log('\nüìã Variables de entorno:');
console.log(`URL: ${supabaseUrl ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
console.log(`ANON_KEY: ${supabaseAnonKey ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
console.log(`SERVICE_KEY: ${supabaseServiceKey ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
console.log(`ACCESS_TOKEN: ${accessToken ? '‚úÖ Configurada' : '‚ùå No configurada'}`);
console.log(`PROJECT_REF: ${projectRef ? '‚úÖ Configurada' : '‚ùå No configurada'}`);

if (!supabaseUrl || !supabaseAnonKey) {
  console.log('\n‚ùå Faltan variables cr√≠ticas de Supabase');
  process.exit(1);
}

// Crear cliente Supabase
console.log('\nüîó Creando cliente Supabase...');
const supabase = createClient(supabaseUrl, supabaseAnonKey);

// Probar conexi√≥n b√°sica
async function testConnection() {
  try {
    console.log('\nüß™ Probando conexi√≥n b√°sica...');
    
    // Test 1: Verificar tablas principales
    const { data: cursos, error: cursosError } = await supabase
      .from('cursos')
      .select('id, titulo')
      .limit(3);
    
    if (cursosError) {
      console.log('‚ùå Error consultando cursos:', cursosError.message);
    } else {
      console.log(`‚úÖ Cursos encontrados: ${cursos?.length || 0}`);
      if (cursos && cursos.length > 0) {
        cursos.forEach(curso => {
          console.log(`   - ${curso.titulo} (${curso.id})`);
        });
      }
    }

    // Test 2: Verificar lecciones
    const { data: lecciones, error: leccionesError } = await supabase
      .from('lecciones')
      .select('id, titulo, curso_id')
      .limit(3);
    
    if (leccionesError) {
      console.log('‚ùå Error consultando lecciones:', leccionesError.message);
    } else {
      console.log(`‚úÖ Lecciones encontradas: ${lecciones?.length || 0}`);
    }

    // Test 3: Verificar materiales
    const { data: materiales, error: materialesError } = await supabase
      .from('materiales')
      .select('id, titulo, tipo_material')
      .limit(3);
    
    if (materialesError) {
      console.log('‚ùå Error consultando materiales:', materialesError.message);
    } else {
      console.log(`‚úÖ Materiales encontrados: ${materiales?.length || 0}`);
    }

    // Test 4: Verificar cuestionarios
    const { data: cuestionarios, error: cuestionariosError } = await supabase
      .from('cuestionarios')
      .select('id, titulo, curso_id')
      .limit(3);
    
    if (cuestionariosError) {
      console.log('‚ùå Error consultando cuestionarios:', cuestionariosError.message);
    } else {
      console.log(`‚úÖ Cuestionarios encontrados: ${cuestionarios?.length || 0}`);
    }

    console.log('\nüéØ RESUMEN DE CONEXI√ìN:');
    console.log('- Conexi√≥n a Supabase: ‚úÖ Exitosa');
    console.log('- Acceso a tablas principales: ‚úÖ Confirmado');
    console.log('- Variables MCP configuradas: ‚úÖ Listas para usar');
    
    console.log('\nüìù Para usar MCP Supabase:');
    console.log('1. Las variables de entorno est√°n correctamente configuradas');
    console.log('2. El proyecto Supabase est√° accesible');
    console.log('3. Puedes usar los comandos MCP para consultar y modificar datos');
    
  } catch (error) {
    console.log('‚ùå Error general:', error.message);
  }
}

testConnection();