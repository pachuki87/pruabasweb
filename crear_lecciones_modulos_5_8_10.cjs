require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_SERVICE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// ID del curso M√ÅSTER EN ADICCIONES E INTERVENCI√ìN PSICOSOCIAL
const MASTER_CURSO_ID = 'b5ef8c64-fe26-4f20-8221-80a1bf475b05';

// Definici√≥n de las lecciones para los m√≥dulos 5, 8 y 10
const lecciones = [
  {
    titulo: 'PSICOLOG√çA APLICADA A LAS ADICCIONES',
    descripcion: 'M√≥dulo especializado en la aplicaci√≥n de principios psicol√≥gicos en el tratamiento de adicciones, incluyendo t√©cnicas de entrevista y terapias de aceptaci√≥n y compromiso.',
    orden: 5,
    duracion_estimada: 180, // 3 horas
    imagen_url: null,
    video_url: null,
    tiene_cuestionario: false,
    archivo_url: 'M√ÅSTER EN ADICCIONES E INTERVENCI√ìN PSICOSOCIAL/PSICOLOGIA APLICADA ADICCIONES/contenido.html',
    leccion_anterior_id: null, // Se actualizar√° despu√©s
    leccion_siguiente_id: null // Se actualizar√° despu√©s
  },
  {
    titulo: 'GESTI√ìN DE LAS ADICCIONES DESDE LA PERSPECTIVA DE G√âNERO',
    descripcion: 'An√°lisis integral de c√≥mo el g√©nero influye en el desarrollo, manifestaci√≥n y tratamiento de las adicciones, con enfoque en protocolos de inclusi√≥n y perspectivas espec√≠ficas.',
    orden: 8,
    duracion_estimada: 150, // 2.5 horas
    imagen_url: null,
    video_url: null,
    tiene_cuestionario: false,
    archivo_url: 'M√ÅSTER EN ADICCIONES E INTERVENCI√ìN PSICOSOCIAL/GESTION PERSPECTIVA GENERO/contenido.html',
    leccion_anterior_id: null, // Se actualizar√° despu√©s
    leccion_siguiente_id: null // Se actualizar√° despu√©s
  },
  {
    titulo: 'TRABAJO FINAL DE M√ÅSTER',
    descripcion: 'Proyecto integrador que permite al estudiante aplicar todos los conocimientos adquiridos durante el m√°ster en un trabajo de investigaci√≥n o intervenci√≥n pr√°ctica en el campo de las adicciones.',
    orden: 10,
    duracion_estimada: 300, // 5 horas
    imagen_url: null,
    video_url: null,
    tiene_cuestionario: false,
    archivo_url: 'M√ÅSTER EN ADICCIONES E INTERVENCI√ìN PSICOSOCIAL/TRABAJO FINAL MASTER/contenido.html',
    leccion_anterior_id: null, // Se actualizar√° despu√©s
    leccion_siguiente_id: null // Se actualizar√° despu√©s
  }
];

// Funci√≥n para verificar si una lecci√≥n ya existe
async function verificarLeccionExiste(titulo, orden) {
  try {
    const { data, error } = await supabase
      .from('lecciones')
      .select('id, titulo, orden')
      .eq('curso_id', MASTER_CURSO_ID)
      .or(`titulo.eq.${titulo},orden.eq.${orden}`);

    if (error) {
      console.error(`‚ùå Error al verificar lecci√≥n ${titulo}:`, error.message);
      return null;
    }

    return data && data.length > 0 ? data[0] : null;
  } catch (error) {
    console.error(`‚ùå Error al verificar lecci√≥n ${titulo}:`, error.message);
    return null;
  }
}

// Funci√≥n para insertar una lecci√≥n
async function insertarLeccion(leccion) {
  try {
    const leccionData = {
      titulo: leccion.titulo,
      descripcion: leccion.descripcion,
      curso_id: MASTER_CURSO_ID,
      orden: leccion.orden,
      duracion_estimada: leccion.duracion_estimada,
      imagen_url: leccion.imagen_url,
      video_url: leccion.video_url,
      tiene_cuestionario: leccion.tiene_cuestionario,
      archivo_url: leccion.archivo_url,
      leccion_anterior_id: leccion.leccion_anterior_id,
      leccion_siguiente_id: leccion.leccion_siguiente_id,
      creado_en: new Date().toISOString(),
      actualizado_en: new Date().toISOString()
    };

    const { data, error } = await supabase
      .from('lecciones')
      .insert([leccionData])
      .select();

    if (error) {
      console.error(`‚ùå Error al insertar lecci√≥n ${leccion.titulo}:`, error.message);
      return null;
    }

    return data[0];
  } catch (error) {
    console.error(`‚ùå Error al insertar lecci√≥n ${leccion.titulo}:`, error.message);
    return null;
  }
}

// Funci√≥n para actualizar una lecci√≥n existente
async function actualizarLeccion(leccionId, leccion) {
  try {
    const leccionData = {
      descripcion: leccion.descripcion,
      duracion_estimada: leccion.duracion_estimada,
      archivo_url: leccion.archivo_url,
      actualizado_en: new Date().toISOString()
    };

    const { data, error } = await supabase
      .from('lecciones')
      .update(leccionData)
      .eq('id', leccionId)
      .select();

    if (error) {
      console.error(`‚ùå Error al actualizar lecci√≥n ${leccion.titulo}:`, error.message);
      return null;
    }

    return data[0];
  } catch (error) {
    console.error(`‚ùå Error al actualizar lecci√≥n ${leccion.titulo}:`, error.message);
    return null;
  }
}

// Funci√≥n principal
async function crearLecciones() {
  console.log('üöÄ Iniciando creaci√≥n de lecciones para m√≥dulos 5, 8 y 10...');
  console.log(`üì° Conectando a Supabase: ${supabaseUrl}`);
  
  let leccionesCreadas = 0;
  let leccionesActualizadas = 0;
  let errores = 0;

  for (const leccion of lecciones) {
    console.log(`\nüìö Procesando lecci√≥n: ${leccion.titulo} (Orden: ${leccion.orden})`);
    
    // Verificar si la lecci√≥n ya existe
    const leccionExistente = await verificarLeccionExiste(leccion.titulo, leccion.orden);
    
    if (leccionExistente) {
      console.log(`‚ö†Ô∏è La lecci√≥n "${leccion.titulo}" ya existe (ID: ${leccionExistente.id})`);
      
      // Actualizar la lecci√≥n existente
      const leccionActualizada = await actualizarLeccion(leccionExistente.id, leccion);
      
      if (leccionActualizada) {
        console.log(`‚úÖ Lecci√≥n actualizada: ${leccion.titulo}`);
        leccionesActualizadas++;
      } else {
        console.log(`‚ùå Error al actualizar lecci√≥n: ${leccion.titulo}`);
        errores++;
      }
    } else {
      // Crear nueva lecci√≥n
      const nuevaLeccion = await insertarLeccion(leccion);
      
      if (nuevaLeccion) {
        console.log(`‚úÖ Lecci√≥n creada: ${leccion.titulo} (ID: ${nuevaLeccion.id})`);
        leccionesCreadas++;
      } else {
        console.log(`‚ùå Error al crear lecci√≥n: ${leccion.titulo}`);
        errores++;
      }
    }
  }

  console.log('\nüéâ ¬°Proceso completado!');
  console.log('üìä RESUMEN FINAL:');
  console.log(`   ‚úÖ Lecciones creadas: ${leccionesCreadas}`);
  console.log(`   üîÑ Lecciones actualizadas: ${leccionesActualizadas}`);
  console.log(`   ‚ùå Errores: ${errores}`);
  console.log(`   üìö Total procesadas: ${lecciones.length}`);

  if (errores === 0) {
    console.log('\nüéØ ¬°Todas las lecciones se procesaron exitosamente!');
  } else {
    console.log(`\n‚ö†Ô∏è Se complet√≥ con ${errores} errores.`);
  }
}

// Ejecutar el script
crearLecciones().catch(console.error);